###PEP2:

Back end: Microservicios
Front: react.

package-json es como el pom de springboot
dependencias:
bootstrap
axios

==========CLASE REACT
React:
	*React trabaja todo con componentes. (<componente>). Es como la idea de "todo puede ser una clase".

	*Estos deben ser escritos en la carpeta src/components/
	*Estos pueden ser componentes->clase o componentes->función.
	*Si quiero que otros archivos usen el componente, debo agregar una línea al final:
		export default NombreComponente

	*Para la pep2 debo escoger usar clase o función y esta decisión va a ser justificada en la evaluación.

	*index.js es el archivo principal que se lee en la app. En index llamo a App. App llamará a cada componente.
	*En la implementación de los componentes debo especificar las rutas de qué componentes van a responder (dibujar la interfaz) para cada ruta.

	*Axios me unirá el front y back. Deberá estar importada en services. (Ej: BookService.js del profe)
	*Los componentes siempre retornan html (lo que se muestra en front)
	*Parece que las clases como botones, tablas y weás así vienen de bootstrap
	*() => función flecha en javascript aparecerá harto trabajando con react. Se parece a las funciones anónimas de scheme.
	*componentDidMount() -> esto ocurre cuando el componente se está montando, que ocurre como a la mitad del proceso de dibujado. Cuando esto ocurre, realizar el llenado de datos pidiéndole las cosas a axios. Esto es importante porque, en caso de no estar, el componente no va a pintar nada.


==========CLASE KUBERNETES
Qué es esto? Gestor de contenedores

En kubernetes los pods son como los contenedores, y los pods se almacenan en nodos. Revisar en la documentación de kubernetes la arquitectura de kubernetes, donde se especifica qué hace cada cosa y cómo están conectadas.
Como el archivo de dockerfile, el deployment de kubernetes es el script que lanza la aplicación y se le especifica qué hay en los pods, en qué puertos corre todo, etc. Este script configura y crea los pods.
Los servicios son la forma de comunicar los pods con el mundo externo básicamente. Hace que los pods sean accesibles.
Esto resume el mundo de kubernetes: Deployment, Service y Pods.

Kubectl es la herramienta para interactuar con el cluster de Kuberneters. Entonces le puedo pedir comandos como kubectl get pods, o kubectl get deployments/services.

En el yml de Deployment de mi aplicación puedo elegir parámetros como:
kind: Deployment
metadata: metadata del deployment
spec: especificaciones técnicas del deployment
selector: detallar a qué está asociado
replicas: cuántos pods voy a crear con las specs de los containers. Esto es importante porque frente a caídas de contendores de la plataforma, al haber más réplicas, kubernetes al detectar una caída de pod, busca una réplica para mantener la ejecución.
En el ejemplo del profe, el Deployment está creando 3 pods.

En el ym de Servicio:
Como el de Deployment, con su metadata, kind y especificaciones.
Diferencia: en el selector:
			app: va conectado al deployment
type: LoadBalancer. Qué es esto, al tener múltiples pods por réplicas, el serviio actuará como un balanceador de cargas para los pods.

Para correr los yml de deploy/service, usar el comando kubectl apply -f miyml.yml
